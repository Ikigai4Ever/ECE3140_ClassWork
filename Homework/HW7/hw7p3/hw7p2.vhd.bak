--      Name: Ty Ahrens 
--      Date: 4/8/2025
--      Purpose: 

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY hw7p2 IS
    GENERIC(
        column_default : INTEGER := 320; -- default column position for the bar
        row_default : INTEGER := 240; -- default row position for the bar
        bar_width : INTEGER := 8 -- width of the bar
        );

  PORT(
    max10_clk:  IN   STD_LOGIC;  --50 MHz clock from the DE10-Lite board
    disp_ena :  IN   STD_LOGIC;  --display enable ('1' = display time, '0' = blanking time)
    row      :  IN   INTEGER;    --row pixel coordinate
    column   :  IN   INTEGER;    --column pixel coordinate
    KEY      :  IN   STD_LOGIC; --push button to reset the bar positions
    red      :  OUT  STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');  --red magnitude output to DAC
    green    :  OUT  STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');  --green magnitude output to DAC
    blue     :  OUT  STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');   --blue magnitude output to DAC
    shift_red_left    : out std_logic;
    shift_red_right   : out std_logic;
    shift_green_left  : out std_logic;
    shift_green_right : out std_logic
    ); 
END hw7p2;


ARCHITECTURE behavior OF hw7p2 IS
 signal x_pos : signed(15 downto 0); -- x-axis position of the bar
 signal y_pos : signed(15 downto 0); -- y-axis position of the bar   
BEGIN
    -- Display Logic
    PROCESS(disp_ena, row, column, KEY, x_pos, y_pos)
    BEGIN
        IF(disp_ena = '1') THEN 
            -- Check if the key is pressed to reset the bar positions
            IF (KEY = '1') THEN 
                x_pos <= column_default;
                y_pos <= row_default;

            ELSE
                -- Red Bar Logic
                IF shift_red_left = '0' AND shift_red_right = '0' THEN
                    IF (column >= x_pos - bar_width AND column <= x_pos) THEN
                        red <= (OTHERS => '1');
                    ELSE
                        red <= (OTHERS => '0');
                    END IF;
                ELSIF shift_red_left = '1' THEN
                    IF (column >= x_pos - bar_width AND column <= column_default) THEN
                        red <= (OTHERS => '1');
                ELSIF shift_red_right = '1' THEN
                    IF (column >= x_pos AND column <= column_default + x_pos) THEN
                        red <= (OTHERS => '1');
                    END IF;
                ELSE 
                    red <= (OTHERS => '0');
                END IF;


                -- Green Bar Logic
                IF shift_green_left = '0' AND shift_green_right = '0' THEN
                    IF (column >= y_pos - bar_width AND column <= y_pos) THEN
                        green <= (OTHERS => '1');
                    ELSE
                        green <= (OTHERS => '0');
                    END IF;
                ELSIF shift_green_left = '1' THEN
                    IF (column >= y_pos - bar_width AND column <= column_default) THEN
                        green <= (OTHERS => '1');
                ELSIF shift_green_right = '1' THEN
                    IF (column >= y_pos AND column <= column_default + y_pos) THEN
                        green <= (OTHERS => '1');
                    END IF;
                ELSE
                    green <= (OTHERS => '0');
                END IF;                    

            END IF;
        ELSE 
            red <= (OTHERS => '0');
            green <= (OTHERS => '0');
            blue <= (OTHERS => '0');
        END IF;
    END PROCESS;
END behavior;




